package Templates

templ CanvasCard(){
    <div class="card">
        <div class="tools">
          <div class="circle">
            <span class="red box"></span>
          </div>
          <div class="circle">
            <span class="yellow box"></span>
          </div>
          <div class="circle">
            <span class="green box"></span>
          </div>
        </div>
        
        <div class=" m-10">
            <div class="mt-4 canvas-container mv-4">
                <canvas id="myCanvas"  width="550" height="300" class="object-none canvas-style">
                </canvas>
    
                <script>
                    // wait for the content of the window element 
                    // to load, then performs the operations. 
                    // This is considered best practice. 
                    window.addEventListener('load', async ()=>{ 
                        document.addEventListener('mousedown', startPainting); 
                        document.addEventListener('mouseup', stopPainting); 
                        document.addEventListener('mousemove', sketch); 
                        setCanvasData();
                        setInterval(setCanvasData, 5100);
                        setInterval(getCanvasData, 1000);
                        
                    }); 
                    const c = document.getElementById("myCanvas");
                    const ctx = c.getContext("2d");
                    let coord = {x:0 , y:0};  
    
                    // This is the flag that we are going to use to  
                    // trigger drawing 
                    let paint = false; 
                        
                    // Updates the coordianates of the cursor when  
                    // an event e is triggered to the coordinates where  
                    // the said event is triggered. 
                    function getPosition(event){ 
                      coord.x = event.clientX - c.offsetLeft; 
                      coord.y = event.clientY - c.offsetTop; 
                    } 
                      
                    
                    function startPainting(event){ 
                      paint = true; 
                      getPosition(event); 
                    } 
                    function stopPainting(){ 
                      paint = false; 
                    } 
                        
                    function sketch(event){ 
                      if (!paint) return; 
                      ctx.beginPath(); 
                      ctx.lineWidth = 2; 
                      ctx.lineCap = 'round'; 
                      ctx.strokeStyle = 'green'; 
                      ctx.moveTo(coord.x, coord.y);
                      getPosition(event); 
                      ctx.lineTo(coord.x , coord.y); 
                      ctx.stroke(); 
                    }
    
                    async function setCanvasData() {
                      const url = "/getImageData";
                      try{
                        const response = await fetch(url)
                        if(!response.ok){
                          throw new Error("HTTP error " + response.status);
    
                        }
                        const json = await response.json();
                        const imageData = ctx.getImageData(0, 0, c.width, c.height).data;
                        
                        let data = new Uint8ClampedArray(json.pixels)
                        for (let i = 0; i < data.length; i++) {
                          if(data[i] == 0 && imageData[i] != 0){
                            data[i] = imageData[i];
                          }
              
                        }
                        const imageData2 = new ImageData(data, c.width, c.height);
                        ctx.putImageData(imageData2, 0, 0);
                      }catch (error){
                        console.log(error);
                      }
                      
                    }
                    function getCanvasData() {
                      const imageData = ctx.getImageData(0, 0, c.width, c.height);
                      let pixelarr = Array.from(imageData.data);
                      fetch('/saveCanvas', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                          pixels: pixelarr
                      })
                  })
                  .then(response => {
                      if (!response.ok) {
                          throw new Error('Network response was not ok');
                      }
                      console.log('Canvas data saved successfully');
                  })
                  .catch(error => {
                      console.error('Error saving canvas data:', error);
                  });
                    }
                    </script>
    
            </div>
        </div>
      </div>
}
