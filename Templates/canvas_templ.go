// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package Templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func CanvasCard() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"card\"><div class=\"tools\"><div class=\"circle\"><span class=\"red box\"></span></div><div class=\"circle\"><span class=\"yellow box\"></span></div><div class=\"circle\"><span class=\"green box\"></span></div></div><div class=\" m-10\"><div class=\"mt-4 canvas-container mv-4\"><canvas id=\"myCanvas\" width=\"550\" height=\"300\" class=\"object-none canvas-style\"></canvas><script>\r\n                    // wait for the content of the window element \r\n                    // to load, then performs the operations. \r\n                    // This is considered best practice. \r\n                    window.addEventListener('load', async ()=>{ \r\n                        document.addEventListener('mousedown', startPainting); \r\n                        document.addEventListener('mouseup', stopPainting); \r\n                        document.addEventListener('mousemove', sketch); \r\n                        setCanvasData();\r\n                        setInterval(setCanvasData, 5100);\r\n                        setInterval(getCanvasData, 1000);\r\n                        \r\n                    }); \r\n                    const c = document.getElementById(\"myCanvas\");\r\n                    const ctx = c.getContext(\"2d\");\r\n                    let coord = {x:0 , y:0};  \r\n    \r\n                    // This is the flag that we are going to use to  \r\n                    // trigger drawing \r\n                    let paint = false; \r\n                        \r\n                    // Updates the coordianates of the cursor when  \r\n                    // an event e is triggered to the coordinates where  \r\n                    // the said event is triggered. \r\n                    function getPosition(event){ \r\n                      coord.x = event.clientX - c.offsetLeft; \r\n                      coord.y = event.clientY - c.offsetTop; \r\n                    } \r\n                      \r\n                    \r\n                    function startPainting(event){ \r\n                      paint = true; \r\n                      getPosition(event); \r\n                    } \r\n                    function stopPainting(){ \r\n                      paint = false; \r\n                    } \r\n                        \r\n                    function sketch(event){ \r\n                      if (!paint) return; \r\n                      ctx.beginPath(); \r\n                      ctx.lineWidth = 2; \r\n                      ctx.lineCap = 'round'; \r\n                      ctx.strokeStyle = 'green'; \r\n                      ctx.moveTo(coord.x, coord.y);\r\n                      getPosition(event); \r\n                      ctx.lineTo(coord.x , coord.y); \r\n                      ctx.stroke(); \r\n                    }\r\n    \r\n                    async function setCanvasData() {\r\n                      const url = \"/getImageData\";\r\n                      try{\r\n                        const response = await fetch(url)\r\n                        if(!response.ok){\r\n                          throw new Error(\"HTTP error \" + response.status);\r\n    \r\n                        }\r\n                        const json = await response.json();\r\n                        const imageData = ctx.getImageData(0, 0, c.width, c.height).data;\r\n                        \r\n                        let data = new Uint8ClampedArray(json.pixels)\r\n                        for (let i = 0; i < data.length; i++) {\r\n                          if(data[i] == 0 && imageData[i] != 0){\r\n                            data[i] = imageData[i];\r\n                          }\r\n              \r\n                        }\r\n                        const imageData2 = new ImageData(data, c.width, c.height);\r\n                        ctx.putImageData(imageData2, 0, 0);\r\n                      }catch (error){\r\n                        console.log(error);\r\n                      }\r\n                      \r\n                    }\r\n                    function getCanvasData() {\r\n                      const imageData = ctx.getImageData(0, 0, c.width, c.height);\r\n                      let pixelarr = Array.from(imageData.data);\r\n                      fetch('/saveCanvas', {\r\n                      method: 'POST',\r\n                      headers: {\r\n                          'Content-Type': 'application/json',\r\n                      },\r\n                      body: JSON.stringify({\r\n                          pixels: pixelarr\r\n                      })\r\n                  })\r\n                  .then(response => {\r\n                      if (!response.ok) {\r\n                          throw new Error('Network response was not ok');\r\n                      }\r\n                      console.log('Canvas data saved successfully');\r\n                  })\r\n                  .catch(error => {\r\n                      console.error('Error saving canvas data:', error);\r\n                  });\r\n                    }\r\n                    </script></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
